#cosine_similarity.get_cosine computes the cosine similarity between two mfccs or plps
#inputs: two mfcc or plp matrices
#outputs: cosine similarity between the two inputs, 
    #a singular value between 0 and 1 broadly representing how 'similar' they are to each other

import librosa
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from librosa.sequence import dtw
from scipy.spatial import distance

#time_warp_mfccs ensures the two mffcs (or plps) are the same length before undergoing cosine similarity calculations
#inputs: two mfccs or plps
#outputs: the first mfcc matrix dynamically time warped with librosa to be same length as the second mfcc matrix
def time_warp_mfccs(mfcc1, mfcc2):
    if mfcc1.shape[1] != mfcc2.shape[1]:
        raise ValueError("Both sets of MFCCs should have the same number of coefficients (shape[1]).")

    # Calculate the time stretching factor based on the path
    stretch_factor = len(mfcc1) / len(mfcc2)

    mfcc1 = np.transpose(mfcc1)
    print("stretch factor: " + str(stretch_factor))

    mfcc1_stretched = mfcc1
    # Time-stretch the shorter set of MFCCs using the stretch factor
    if(stretch_factor != 1):
        mfcc1_stretched = librosa.effects.time_stretch(y=mfcc1, rate=stretch_factor, n_fft=60)

    mfcc1_stretched = np.transpose(mfcc1_stretched)

    print ("mfcc1_stretched: " + str(mfcc1_stretched))
    return mfcc1_stretched

#compute_cosine_similarity, given two mfccs (or plps) of the same length, computes their cosine similarity with scipy
#inputs: two idential-length mfccs or plps 
#outputs: cosine similarity
def compute_cosine_similarity(mfcc1, mfcc2):
    # flatten mfccs
    mfcc1 = np.hstack(np.array(mfcc1))
    mfcc2 = np.hstack(np.array(mfcc2))

    # compute similarity
    similarity = distance.cosine(mfcc1, mfcc2)
    
    # print("similarity: " + str(similarity))
    return similarity

#get_cosine, the main function of this file, is described above
def get_cosine(mfcc1, mfcc2):

    # make sure mfcc1 is shorter than mfcc2 to ensure cosine accuracy
    if(len(mfcc1) > len(mfcc2)):
        holder = mfcc1
        mfcc1 = mfcc2
        mfcc2 = holder

    # Time warp the first set of MFCCs to match the length of the second set
    mfcc1_stretched = time_warp_mfccs(mfcc1, mfcc2)

    similarity = 0.0#instantiate similarity

    # Compute the cosine similarity between the time-warped MFCCs and the second set of MFCCs
    if(mfcc1_stretched.shape[1] == mfcc2.shape[1]):
        similarity = compute_cosine_similarity(mfcc1_stretched, mfcc2)

    # print(similarity)#can print output cosine similarity for testing purposes 

    return similarity
    
#for testing purposes: four test matrices with varying lengths/widths and values

# matrix3 = [[-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            ]

# matrix4 = [[-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            [-3.95277252e+02, -3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02,-3.95277252e+02],
#            ]

# matrix1 = [[-3.95277252e+02, -4.31721741e+02, -5.13526794e+02,
#         -5.29957886e+02, -5.22234192e+02, -4.86597839e+02],
#        [ 1.36776672e+02,  1.46737213e+02,  1.78973969e+02,
#          2.02832520e+02,  2.02669022e+02,  2.12357910e+02],
#        [ 1.34786868e+00,  1.91200280e+00, -9.42220497e+00,
#         -2.76222706e+00, -9.53484821e+00, -1.96469104e+00],
#        [ 1.65280616e+00,  8.51731014e+00,  1.36966057e+01,
#         -1.09105911e+01, -1.10851231e+01, -8.42345047e+00],
#        [-1.10024385e+01, -1.90156364e+01, -3.73827133e+01,
#         -4.01559181e+01, -3.88394012e+01, -2.40833168e+01],
#        [ 7.19714928e+00,  6.68949604e+00,  3.32899933e+01,
#          4.24815674e+01,  4.98023987e+01,  4.39753838e+01],
#        [ 7.56515694e+00,  3.73515940e+00, -1.18131828e+01,
#         -3.71922421e+00, -4.33979213e-01, -9.42939568e+00],
#        [ 9.98296356e+00,  9.67287445e+00,  4.36302853e+00,
#         -1.63891373e+01, -2.52645836e+01, -3.80150986e+01],
#        [-5.57896233e+00, -1.50448251e+00,  1.32471390e+01,
#          7.85575104e+00,  1.84499717e+00, -2.78097606e+00],
#        [-3.62765217e+00, -4.84978867e+00,  1.92837715e-02,
#         -3.41638923e-01,  9.20943022e-01,  6.50524735e-01],
#        [-9.84535599e+00, -8.62931633e+00, -1.26737690e+01,
#         -6.85263157e+00, -3.66116345e-01, -4.01225185e+00],
#        [-2.01289558e+00,  6.43286943e+00,  4.14216948e+00,
#         -4.36650991e+00, -3.06282830e+00, -2.27253765e-01],
#        [-1.89485049e+00,  3.26821470e+00,  1.45080166e+01,
#          3.30944490e+00, -2.71324682e+00, -7.73610401e+00],
#        [-1.33624115e+01, -1.57150497e+01, -1.21614666e+01,
#          7.50445175e+00,  3.37751508e+00,  4.16843987e+00],
#        [-8.56813240e+00, -1.06342497e+01, -6.28262949e+00,
#          9.38175380e-01,  4.27451491e-01, -1.13759792e+00],
#        [ 9.17764664e-01, -7.23671317e-02, -8.41153812e+00,
#         -1.09941006e+01, -1.19817448e+01, -4.49381828e+00],
#        [-1.93658066e+00, -4.81264496e+00, -6.65259242e-01,
#         -1.81818759e+00, -4.47212601e+00, -5.30884624e-01],
#        [-6.50567913e+00, -8.86304665e+00, -9.97323036e+00,
#         -2.68978262e+00, -3.86341715e+00, -2.83091688e+00],
#        [ 2.38035536e+00,  6.76962852e+00,  7.17681313e+00,
#          5.17594194e+00,  3.75213099e+00,  2.33621359e+00],
#        [-9.76452065e+00, -1.09077692e+01, -1.79808998e+01,
#         -2.08833580e+01, -1.90038223e+01, -1.63248405e+01]]

# matrix2 = [[-4.37499481e+02, -4.69421875e+02, -5.41590332e+02,
#         -5.19466309e+02, -4.78392609e+02, -4.38827393e+02,
#         -3.56557953e+02,
#         -3.56557953e+02],
#        [ 1.37209106e+02,  1.46365906e+02,  1.77612823e+02,
#          2.06482910e+02,  2.30038879e+02,  2.07262238e+02,
#          1.40904922e+02,
#         -3.56557953e+02],
#        [ 7.93661976e+00, -1.96604371e+00, -5.82221222e+00,
#         -6.90237379e+00, -2.79064274e+01, -5.10445938e+01,
#         -2.49113235e+01,
#         -3.56557953e+02],
#        [ 4.04520683e+01,  3.92617340e+01,  2.87060928e+01,
#         -4.68769360e+00, -2.47754936e+01, -1.34890842e+01,
#          7.97287655e+00,
#         -3.56557953e+02],
#        [ 7.17053986e+00,  8.97611046e+00, -2.53872061e+00,
#         -2.76980209e+01, -2.80219212e+01, -1.50366535e+01,
#          5.29048347e+00,
#         -3.56557953e+02],
#        [ 1.56017375e+00,  1.35728045e+01,  3.86924896e+01,
#          4.94033661e+01,  5.21968002e+01,  4.87690125e+01,
#          1.92394638e+01,
#         -3.56557953e+02],
#        [-1.88907547e+01, -2.75363159e+01, -2.56319771e+01,
#         -1.01624308e+01, -2.06574402e+01, -3.61041336e+01,
#         -2.56662197e+01,
#         -3.56557953e+02],
#        [ 2.96258879e+00, -2.08416080e+00, -4.40498638e+00,
#         -2.05719147e+01, -3.34636192e+01, -3.02246361e+01,
#         -1.02595177e+01,
#         -3.56557953e+02],
#        [ 5.06993198e+00,  9.01046944e+00, -3.75832200e+00,
#         -9.70960236e+00, -6.57244301e+00,  5.30067825e+00,
#          4.30175686e+00,
#         -3.56557953e+02],
#        [-1.82244606e+01, -1.58789196e+01, -1.70033092e+01,
#         -3.25320387e+00,  8.40162277e+00,  1.31385136e+01,
#          1.23046074e+01,
#         -3.56557953e+02],
#        [-1.39666977e+01, -1.07823124e+01,  7.54701495e-01,
#          7.79819441e+00,  1.04462509e+01,  3.26708937e+00,
#         -7.70520270e-01,
#         -3.56557953e+02],
#        [ 5.72044468e+00,  3.93264818e+00,  1.84742033e+00,
#          9.73603010e-01, -2.72546339e+00,  2.38347149e+00,
#         -4.39968777e+00,
#         -3.56557953e+02],
#        [ 1.53614402e+00,  2.64102280e-01,  2.59512734e+00,
#          2.05785728e+00,  6.74395740e-01, -2.49374479e-01,
#         -3.18221903e+00,
#         -3.56557953e+02],
#        [-5.76903009e+00, -5.25522709e+00, -1.06507607e+01,
#         -5.21000719e+00, -4.89876604e+00, -2.01627541e+00,
#          2.68348837e+00,
#         -3.56557953e+02],
#        [-9.16139793e+00, -5.32531261e+00,  1.17462802e+00,
#         -4.44596291e-01,  1.96743220e-01, -1.49722362e+00,
#          1.55377209e+00,
#         -3.56557953e+02],
#        [-7.94436121e+00, -6.41644669e+00, -6.06486893e+00,
#         -5.19967937e+00, -3.39839029e+00, -4.34822178e+00,
#         -7.99993134e+00,
#         -3.56557953e+02],
#        [-5.59609604e+00, -7.00215626e+00, -5.37663412e+00,
#         -4.55305958e+00, -5.97972441e+00, -3.30341053e+00,
#         -6.69712830e+00,
#         -3.56557953e+02],
#        [-6.80342579e+00, -6.95244741e+00, -8.19354820e+00,
#         -1.08373194e+01, -8.69783020e+00, -9.17211723e+00,
#         -6.45916128e+00,
#         -3.56557953e+02],
#        [ 1.02183306e+00,  3.94016957e+00,  4.20030403e+00,
#          5.96666813e+00,  9.54901314e+00,  9.12296581e+00,
#          7.73700356e-01,
#         -3.56557953e+02],
#        [ 3.03581047e+00,  1.30752695e+00, -3.94821644e+00,
#         -1.00785332e+01, -1.32736263e+01, -1.16545982e+01,
#         -4.88982773e+00,
#         -3.56557953e+02]]

# matrix1 = np.transpose(matrix3)
# matrix2 = np.transpose(matrix4)

# print("MATRIX1: " + str(matrix1))

# print("MATRIX2: " + str(matrix2))

# get_cosine(matrix1, matrix2)

